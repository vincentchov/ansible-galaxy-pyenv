---
- name: Install PyEnv
  git:
    repo: https://github.com/pyenv/pyenv.git
    dest: "{{ pyenv_path }}"
    update: "{{ pyenv_update_git_install }}"

- name: Install PyEnv-virtualenv plugin
  git:
    repo: https://github.com/yyuu/pyenv-virtualenv.git
    dest: "{{ pyenv_path }}/plugins/pyenv-virtualenv"
    update: "{{ pyenv_update_git_install }}"

- name: Install PyEnv-update plugin
  git:
    repo: https://github.com/pyenv/pyenv-update.git
    dest: "{{ pyenv_path }}/plugins/pyenv-update"
    update: "{{ pyenv_update_git_install }}"
  when: pyenv_update

- name: Install .pyenvrc
  template:
    src: ".pyenvrc.j2"
    dest: "{{ pyenv_path }}/.pyenvrc"
    owner: "{{ pyenv_owner }}"
    mode: "0644"

- name: "Load pyenv env variables in {{ pyenv_setting_path }}"
  lineinfile: dest="{{ pyenv_setting_path }}"
              regexp="\.pyenvrc$"
              line="source {{ pyenv_path }}/.pyenvrc"
              state=present
              create=yes

- name: "Add pyenv autocomplete in {{ pyenv_setting_path }}"
  lineinfile: dest="{{ pyenv_setting_path }}"
              regexp="pyenv\.bash$"
              line="source {{ pyenv_path }}/completions/pyenv.bash"
              state=present
  when: pyenv_enable_autocompletion

- name: Update Pyenv interpreter list
  shell: . {{ pyenv_path }}/.pyenvrc && pyenv update
  when: pyenv_update

- name: Ensure that existing Python installations were compiled with the correct PYTHON_CONFIGURE_OPTS
  block:
  - name: Search for existing Python interpreters
    stat:
      path: "{{ pyenv_path }}/versions/{{ item }}"
    register: existing_python_installations
    loop: "{{ pyenv_python_versions }}"

  - name: Copy over check-configure-options.py
    template:
      src: templates/check-configure-options.py.j2
      dest: "{{ ansible_env.HOME }}/check-configure-options.py"
      owner: "{{ pyenv_owner }}"
      group: "{{ pyenv_owner }}"
      mode: "0755"

  - name: Check each one's PYTHON_CONFIGURE_OPTS options
    shell: "{{ item.stat.path }}/bin/python {{ ansible_env.HOME }}/check-configure-options.py"
    register: py_installs_w_wrong_flags
    when: item.stat.exists and item.stat.isdir
    changed_when: py_installs_w_wrong_flags.stdout == 'False'
    loop: "{{ existing_python_installations.results }}"
    loop_control:
      label: "{{ {'item': item.item, 'stat': {'exists': item.stat.exists }} }}"

  - name: Uninstall existing Python interpreters w/ wrong compilation flags
    shell: ". {{ pyenv_path }}/.pyenvrc && pyenv uninstall -f {{ item.item.item }}"
    args:
      removes: "{{ item.item.stat.path }}"
    when: item.changed and item.stdout == 'False'
    loop: "{{ py_installs_w_wrong_flags.results }}"
    loop_control:
      label: "{{ item.item.item }}"
  when: pyenv_python_configure_opts

- name: Install Python interpreters "{{ pyenv_python_versions }}"
  shell: . {{ pyenv_path }}/.pyenvrc && env PYTHON_CONFIGURE_OPTS="{{ pyenv_python_configure_opts }}" pyenv install {{ item }}
         creates="{{ pyenv_path }}/versions/{{ item }}/bin/python"
  with_items: "{{ pyenv_python_versions }}"

- name: Create virtual environments
  shell: . {{ pyenv_path }}/.pyenvrc && pyenv virtualenv {{ item.py_version }} {{ item.venv_name }}
         creates="{{ pyenv_path }}/versions/{{ item.venv_name }}/bin/python"
  with_items: "{{ pyenv_virtualenvs }}"

- name: Set pyenv global
  shell: . {{ pyenv_path }}/.pyenvrc && pyenv global {{ pyenv_global }} && pyenv rehash
  when: pyenv_global is defined

